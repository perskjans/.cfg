#!/bin/sh

reposfile=~/.cache/gitrepos.dat

repostatus()
{
    reposfile_tmp=$reposfile\_tmp
    cat $reposfile | sort | uniq > $reposfile_tmp
    dirs=$(cat $reposfile_tmp)

    rm -f $reposfile
    touch $reposfile

    for dir in $dirs;
    do
        if [ -d $dir ]; then
            echo $dir >> $reposfile
        fi
    done

    rm -f $reposfile_tmp
}

findall()
{
    reposfile_tmp=$reposfile\_tmp
    find $(pwd) -name ".git" -type d | sed "s/\/\.git//g" | sort | uniq >> $reposfile_tmp
    cat $reposfile_tmp | sort | uniq > $reposfile
    rm $reposfile_tmp
}

clone()
{
    result=$(git clone $* 2>&1)
    exit_code=$?

    if [ "$exit_code" != "0" ]; then
        echo -e ${TC_FG_RED}${result}${CO_RESET}
        exit $exit_code
    fi

    echo -e ${TC_FG_GREEN}${result}${CO_RESET}
    dir=$(echo $result | cut -d"'" -f2)
    echo $(pwd)/$dir >> $reposfile

    repostatus
}

pullall()
{
    if [[ $# -gt 0 ]]; then
        FILTER="$1"
    else
        FILTER="/"
    fi

    echo
    echo FILTER: "$FILTER"
    echo

    pull()
    {
        dir=$1
        pushd $dir >/dev/null
        result=$(git remote prune origin 2>&1)
        result=$(git pull 2>&1)

        if [ ! $result =~ "up to date" ] && [ ! $result =~ "up-to-date" ]; then
            echo $dir
            echo -e "${TC_FG_CYAN}${result}${CO_RESET}"
            echo
        fi

        popd >/dev/null
    }

    repostatus

    dirs=$(cat $reposfile)

    for dir in $dirs;
    do
        if [ -d $dir ] && [ $(echo $dir | egrep "$FILTER" | wc -l) -ne 0 ]; then
            pull $dir
        fi
    done
}

submoduleadd()
{
    local destdir=$1; shift
    local url=$1; shift
    local args="$*"
    local name=${url##.*/}
    local path=$destdir/$name

    echo Running: git submodule add --name $name $args "$url" $path
    git submodule add --name $name $3 "$url" $path
}

submodulerm()
{
    local destdir=$1; shift
    local args="$*"

    echo Running: git submodule deinit "$args" $destdir
    git submodule deinit "$args" $destdir
    echo Running: git rm $destdir "$args"
    git rm $destdir "$args"
}


$*
